{"version":3,"sources":["components/card/Card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BACKL,EAAMI,QAAQE,OAEnB,kCAAKN,EAAMI,QAAQG,MAAnB,WCJKC,G,MAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAEV,qBAAKC,UAAU,YAAf,SACKD,EAAMW,SAASC,KAAK,SAAAR,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNlBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CHG,G,wDA9Cb,aAAe,IAAD,8BACZ,gBASFH,aAAe,SAACI,GAGd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAgBd,WAAqB,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAG7C,WAKE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAzCTI,cCKJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f0c85ef3.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>\n            {props.monster.name}\n        </h2>\n        <p> {props.monster.email} </p>\n    </div>\n);\n    \n\n\nexport default Card;","import React from 'react';\n\nimport { Card } from '../card/Card';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n    console.log(props);\n    return(\n      <div className=\"card-list\">\n          {props.monsters.map( monster => (\n            <Card key={monster.id} monster={monster} />\n          ))}\n      </div>\n    )\n};","import React from 'react';\n\nimport './search-box.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className=\"search\"\n        type='search' \n        placeholder={placeholder} \n        onChange={handleChange} \n    />\n);","import { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nimport './App.css';\n\n class App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n    // This is verbose, just write the method as an arrow func and move on\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (e) => {\n    // weird es6 magic basically binds 'this' to the place our arrow func\n    // was created, so in this case, 'this' refers to App.js aka our app component\n    this.setState({ searchField: e.target.value });\n  }\n\n  componentDidMount() {\n    // populate monsters state obj with json placeholder api on mount\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    // my assumption is that we handle the below inside of the render function\n    // because render() is called whenever state updates and we want to\n    // automatically filter\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}